oc explain pod
oc explain pod.spec.containers
oc create -f pod/pod.yaml       run a pod
oc get pods
oc rsh <pod name>                 shell into pod
exit
oc delete pod <pod name>
oc get pods --watch  or  oc get pods -w

deploymentconfig basics
oc explain deploymentconfig
oc new-app quay.io/practicalopenshift/hello-world --as-deployment-config
oc status
oc get pods
oc get svc
oc get dc
oc get istag
oc delete svc/hello-world
oc get svc
oc status
oc delete dc/hello-world
oc new-app quay.io/practicalopenshift/hello-world --as-deployment-config
oc describe dc/hello-world
oc delete all -l app=hello-world          clear up use tag selector
oc new-app quay.io/practicalopenshift/hello-world --name demo-app --as-deployment-config
oc describe dc/demo-app
oc new-app quay.io/practicalopenshift/hello-world --name demo-app-2 --as-deployment-config
oc delete all -l app=demo-app
oc delete all -l app=demo-app-2
oc new-app https://gitlab.com/practical-openshift/hello-world.git --as-deploymet-config
oc logs -f bc/hello-world

oc get -o yaml dc/hello-world
oc get rc                             check replication controllers
oc rollout latest dc/hello-world            roll out the lastest version
oc rollback dc/hello-world


services and routes:
oc explain svc
oc explain svc.spec
oc create -f pods/pod.yaml
oc expose --port 8080 pod/hello-world-pod
oc status
oc create -f pods/pod-2.yaml
oc rsh hello-world-pod-2
wget -qO- <service Ip:port>
env
exit
oc new-app quay.io/practicalopenshift/hello-world --as-deployment-config
oc expose svc/hello-world
oc status
curl <route>
oc get -o yaml route/hello-world                                                  https://www.cnblogs.com/itzgr/p/13162476.html

                                                                  
configMap:
configMap  -- hold configuration data. not for sensitive data,  1MB limit storage
securet for sensitive data.

oc create configmap message-map --from-literal MESSAGE="Hello from ConfigMap"
oc get configmap
oc get -oyaml cm/message-map
oc new-app quay.io/practicalopenshift/hello-world --as-deployment-config
oc expose svc/hello-world
curl
oc set env dc/hello-world --from cm/message-map
curl         --- should see different output from last curl
oc get -oyaml dc/hello-world             -- can see configmap info under template.spec.containers
echo "Hello from ConfigMap file" > MESSAGE.txt              configure configmap from file
cat MESSAGE.txt
oc create configmap file-map --from-file=MESSAGE.txt
oc get -oyaml cm/file-map
oc create configmap file-map-2 --from-file=MESSAGE=MESSAGE.txt
oc get -oyaml cm/file-map-2
oc set env dc/hello-world --from cm/file-map-2
curl <hello-world> 
oc create configmap pods-example --from-file pods                        create configmap from directies
oc get -oyaml configmap/pods-example


Secrets: 
hold sensitive data, 
Opaque Secrets:arbitrary key-value pairs, 
Service account token secrets:authenticate to internal openshift APIs,
Docker configuration secrets: kubernetes.io/dockercfg   kubernetes.io/dockerconfigjson
simple authentication secrets: basic Auth, SSH Key, TLS Auth

oc create secret generic message-secret --from-literal MESSAGE="Secret Message"             generic is type of secret, message-secret is name
oc get secret
oc get -oyaml secret/message-secret
oc new-app quay.io/practicalopenshift/hello-world --as-deployment-config
oc expose svc/hello-world
curl
oc set env dc/hello-world --from secret/message-secret
curl
oc get -oyaml dc/hello-world


imagestream

oc get is
oc get istag
oc delete is/hello-world
oc import-image --confirm quay.io/practicalopenshift/hello-world                    download image
oc get istag
oc describe istag/hello-world:latest
oc new-app uat-admin002/hello-world --as-deployment-config
oc tag <original> <destination>
oc tag quay.io/image-name:tag image-name:tag
oc tag quay.io/practicalopenshift/hello-world:update-message hello-world:update-message
oc get is
echo $REGISTRY_USERNAME
source credentials.env
docker build -t quay.io/$REGISTRY_USERNAME/private-repo .                         build image via dockerfile
docker login quay.io
docker push quay.io/$REGISTRY_USERNAME/private-repo

oc create secret docker-registry demo-image-pull-secret --docker-server=$REGISTRY_HOST --docker-username=$REGISTRY_USERNAME --docker-password=$REGISTRY_PASSWORD --docker-email=$REGISTRY_EMAIL
oc secrets lik default demo-image-pull-secret --for=pull                 default is service account
oc describe sa/default
oc new-app quay.io/pfang7878/private-repo --as-deployment-config
oc expose svc/private-repo
curl 


Builds:
oc new-build https://gitlab.com/practical-openshift/hello-world.git
oc get -oyaml buildconfig/hello-world
oc get build 
oc logs -f buildconfig/helllo-world
oc logs -f build/hello-world
oc start-build bc/hello-world
oc describe is/hello-world
oc cancel-build bc/hello-world
use webhook:
export GENERIC_SECRET=<secret from buildconfig>
oc describe bc/helllo-world
curl -X POST -k <url with replaced secret(under webhook in describe bc)> 
building branch:
oc new-build https://gitlab.com/practical-openshift/hello-world.git#update-message
oc logs -f bc/hello-world
oc new-build https://gitlab.com/practical-openshift/labs.git --context-dir hello-world           start a build in subdirectory
oc logs bc/labs

config build hooks:
oc new-build https://gitlab.com/practical-openshift/labs.git --context-dir hello-world
oc set build-hook bc/hello-world --post-commit --script="echo Hello From build hook"
oc describe dc/hello-world
oc start-build bc/hello-world
oc logs -f bc/hello-world
oc set build-hok bc/hello-world --post-commit --remove

S2I:
oc new-app https://gitlab.com/practical-openshift/labs.git --context-dir s2i/ruby --as-deployment-config
oc logs -f bc/labs
oc get pods
oc expose svc/labs


Volumes:
i'ts filessystem mounted in pods, many suppliers(files build in pods)
volume can be configmap, secrets, attached hard disks, cloud storage

emptyDir: temporary storage on worker node, deleted when a pod is terminated not for presistent data
oc new-project volums
oc new-app quay.io/practicalopenshift/hello-world --as-deployment-config
oc set volumen dc/hello-world --add --type emptyDir --mount-path /empty-dir-demo
oc rsh hello-word
echo "test file contents" > /empty-dir-demo/test-file.txt
configmap volumes:
oc create configmap cm-volume --from-literal file.txt="configMap file contents"
oc set volume dc/hello-world --add --configmap-name cm-volume --mount-path /cm-directory
oc get -oyaml dc/hello-world
oc describe cm/cm-volume
oc get pod
oc rsh hello-world
ls /cm-directory
cat /cm-directory/file.txt
                        https://kubernetes.io/docs/concepts/storage/volumes
oc explain persistentvolume.spec

advanced deploymentcofig:
deployment triggers (when)
deployment strategies(how)
liveness and readiness probes
3 types triggers:
new image --> imagestreamtag trigger --> deploymentconfig --> trigger rollou
developer push code --> git repo -->webhook trigger --> buildconfig create --> build --> new image -->istag imagechange trigger --> dc --> rollout
DC yaml changed --> deploymentconfig --> trigger rollout

oc new-project advanced-dc
oc new-app quay.io/practicalopenshift/hello-world --as-deployment-config
oc describe dc/hello-world                  can see triggers config and image
oc set volume dc/hello-world --add --type emptyDir --mount-path /config-change-demo          trigger build

oc set triggers dc/hello-world
oc set triggers dc/hello-world --remove --from-config
oc describe dc/hello-world
oc set triggers dc/hello-world          false to trigger
oc set triggers dc/hello-world --from-config
oc set triggers dc/hello-world                true
add and remove imagechange trigger:
oc set triggers dc/hello-world --remove --from-image hello-world:latest
oc set triggers dc/hello-world
oc set triggers dc/hello-world --from-image hello-world:latest -c hello-world
oc set triggers dc/hello-world
overview of deployment strategies:
rolling strategy: 
start new version
switch traffic to new version
stop old version
recreate strategy:  need downtime
start new version
switch traffic to new version
stop old version
custom strategy:
start
run custom deployment image
end
deployment hooks:
rolling strategy:
pre hook --> start new version --> switch traffic to new version --> stop old version --> post hook
recreat strategy:
pre hook --> stop old version --> mid hook --> start new version --> post hook
strategy hook definition:  abort policy, retry policy, ignore policy

pre-deployment hook
oc get pods -w
oc rollout latest dc/hello-world
oc set deployment-hook dc/hello-world --pre -c hello-world -- /bin/echo Hello from pre-deploy hook
oc describe dc/hello-world
oc rollout latest dc/hello-world
oc get events

recreate strategh:   no commands,  need to edit yaml file
oc edit dc/hello-world           remove stragegy context only change type:Recreate
oc get -oyaml dc/hello-world

liveness and readiness probles
readiness probe: is this pod ready to accept traffic?
liveness probe: should we restart this pod?
probe options: 
HTTP GET
TCP
Command
probe configuration: number of retries, time between tries
configure liveness probe:
oc set probe dc/hello-world --liveness --open-tcp=8080
oc describe dc/hello-world
oc set probe dc/hello-world --liveness --open-tcp=8081
oc get pods -w
oc set probe dc/hello-world --liveness --open-tcp=8080
oc get pods -w

Scalling Application
autoscaler: spread across nodes, use cheaper hardware, can handle node failure
manual scaling:
oc new-project scaling
oc new-app quay.io/practicalopenshift/hello-world --as-deployment-config
oc describe dc/hello-world
oc scale dc/hello-world --replicas=3
oc describe dc/hello-world
oc scale dc/hello-world --replicas=1
pod autoscaler:
number of pods
current resource usage
desired resource usage
oc autoscale dc/hello-world --min 1 --max 10 --cpu-percent=80
oc get hpa
oc describe hpa/hello-world
oc get -oyaml hpa/hello-world

templates:
preamble
object list
parameters
how to create custom templates, ow to use existing openshift templates
oc new-project templates
cd labs
oc create -f template/hello-world-template.yaml
oc get template 
oc new-app hello-world
oc status
curl <your route>
oc get -oyaml template/hello-world
oc delete all --all
oc new-app hello-world -p MESSAGE="Hello from parameter override."
curl < your route>

oc process hello-world
oc process hello-world -oyaml
oc process hello-world -oyaml -p MESSAGE="Hello from oc process."
oc process hello-world -oyaml -p MESSAGE="Hello from oc process." > processed-objects.yaml
head processed-objects.yaml
oc create -f processed-objects.yaml
oc status
curl < your route>

oc process -oyaml -f template/hello-world-template.yaml
oc delete all --all
oc new-app -f template/hello-world-template.yaml -p MESSAGE="Hello from oc new-app with a file"

customtemplates：
deploymentconfig, imageStream,buildconfig,service, route
oc get -oyaml dc,is,bc,svc,route
oc get -oyaml dc,is,bc,svc,route > test-template.yaml
vim test-template.yaml
1,change item to objects, 2,change kind to Template from List, 3,add name for matadata, 4,remove status from each resource 
5,remove most of matadata except for name, labels, and annotations 6,remove any automatically-assigned resources such as 
service virtual IPs and route hosts,7, (optional)add template parameters

how to use built-in templates:
oc get template -n openshift


















